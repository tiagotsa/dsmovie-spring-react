name: Deploy to Production

on:
  push:
    branches: [ main ]  # A pipeline será acionada quando houver push na branch main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Define que o job será executado em um runner Ubuntu

    steps:
      - name: Checar repositório
        uses: actions/checkout@v4  # Faz checkout do repositório para que o código esteja disponível

      - name: Instalar SSH
        run: sudo apt-get install -y sshpass  # Instala o sshpass para poder usar SSH de forma não interativa

      - name: Configurar chave SSH
        run: |
          # Adicionando o GitHub ao known_hosts para evitar erro de verificação da chave do host
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts  # -H adiciona a verificação explícita da chave

          # Definindo a chave privada SSH para o uso no repositório
          echo "$VPS_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # Garantir que a chave tenha as permissões corretas
          
          # Testando a conexão SSH com o GitHub
          ssh -T git@github.com
          
      - name: Definir variável e rodar Docker Compose na VPS
        run: |
          # Definindo variáveis diretamente no arquivo YAML
          VPS_USER="root"  # Seu usuário na VPS
          VPS_HOST="145.223.29.209"  # IP da sua VPS

          # A chave privada SSH é definida aqui como variável
          VPS_SSH_KEY="-----BEGIN OPENSSH PRIVATE KEY-----...
          -----END OPENSSH PRIVATE KEY-----"

          # Adicionar o GitHub à lista de hosts conhecidos (evitar erro de verificação da chave do host)
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

          # Salvando a chave privada em um arquivo temporário e definindo permissões
          echo "$VPS_SSH_KEY" > private_key
          chmod 600 private_key

          # Conectando à VPS, criando o diretório se necessário, clonando o repositório e rodando o comando docker-compose
          ssh -o StrictHostKeyChecking=no -i private_key $VPS_USER@$VPS_HOST "
            # Certificando-se de que o diretório existe e clonando o repositório se não existir
            if [ ! -d /root/dsmovie-spring-react/.git ]; then
              git clone git@github.com:seu_usuario/seu_repositorio.git /root/dsmovie-spring-react
            fi

            cd /root/dsmovie-spring-react && git pull && docker-compose up -d
          "
