# Nome do Workflow
name: Deploy to VPS

# Gatilhos: Roda quando houver push na branch 'main' OU manualmente
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # Nome do Job
  deploy:
    # Runner a ser usado (ambiente de execução)
    runs-on: ubuntu-latest

    # Etapas a serem executadas no job
    steps:
      # Etapa 1: Baixa o código do seu repositório para o runner do Actions
      - name: Checkout code
        uses: actions/checkout@v3

      # Etapa 2: Configura a chave SSH para permitir a conexão com a VPS
      - name: Setup SSH
        # Cria diretório .ssh, grava a chave privada (do secret) em id_rsa,
        # ajusta permissões e adiciona a chave do host da VPS para evitar prompts.
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Etapa 3: Conecta à VPS via SSH e executa os comandos de deploy
      - name: Deploy to VPS
        # Usa uma Action popular para facilitar a execução de comandos via SSH
        uses: appleboy/ssh-action@v1.0.3
        # Passa as credenciais e o script a ser executado
        with:
          host: ${{ secrets.VPS_HOST }} # IP ou hostname da VPS (vem dos Secrets)
          username: ${{ secrets.VPS_USERNAME }} # Usuário SSH (ex: root) (vem dos Secrets)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Chave privada SSH (vem dos Secrets)
          # Script multi-linha a ser executado na VPS
          script: |
            # Garante que estamos no diretório correto do projeto na VPS
            echo ">>> Navigating to project directory..."
            cd /root/dsmovie-spring-react || exit 1 # Falha se o diretório não existir

            # Atualiza o código local com a versão mais recente da branch 'main' do Git
            echo ">>> Pulling latest changes from Git..."
            git fetch origin main
            git reset --hard origin/main # Força o estado local a ser igual ao remoto

            # --- CONSTRUÇÃO E DEPLOY COM DOCKER COMPOSE ---

            # 1. Constrói (ou reconstrói) as imagens Docker definidas no compose file.
            #    USA EXPLICITAMENTE o arquivo 'docker-compose.yml'.
            echo ">>> Building Docker images using docker-compose.yml..."
            docker-compose -f docker-compose.yml build

            # 2. Para e REMOVE os containers e redes da execução anterior.
            #    USA EXPLICITAMENTE o arquivo 'docker-compose.yml'.
            #    ESSENCIAL para limpar o estado antigo e evitar conflitos.
            echo ">>> Stopping and removing old containers..."
            docker-compose -f docker-compose.yml down

            # 3. Sobe os novos containers em background (detached).
            #    USA EXPLICITAMENTE o arquivo 'docker-compose.yml'.
            #    Isso lerá a configuração atualizada (nomes, portas, args, etc.).
            echo ">>> Starting new containers..."
            docker-compose -f docker-compose.yml up -d

            # 4. (Opcional) Limpa imagens Docker antigas que não estão mais associadas a containers.
            echo ">>> Cleaning up dangling Docker images..."
            docker image prune -f

            echo ">>> Deployment finished successfully!"

      # Você pode adicionar outras etapas aqui se necessário (ex: notificações)
