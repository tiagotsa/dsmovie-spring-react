name: Deploy to VPS.

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Iniciando acesso via SSH no servidor VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          mkdir -p ~/.ssh/
<<<<<<< HEAD
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
=======
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Instalando e configurando Git on VPS
        run: |
          ssh -i ~/.ssh/private.key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo apt-get update
              sudo apt-get install -y git
            fi
            git config --global init.defaultBranch main
          ENDSSH
>>>>>>> 3324d88e1770435ef9dd951a1b57db5edd7bbfc6

      - name: Clone aplicação para VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          ssh -i ~/.ssh/id_ed25519 $VPS_USERNAME@$VPS_HOST << 'ENDSSH'
            cd ~
            if [ -d "dsmovie-spring-react" ]; then
              mv dsmovie-spring-react dsmovie-spring-react_backup_$(date +%Y%m%d_%H%M%S)
            fi
            git clone https://github.com/tiagotsa/dsmovie-spring-react.git
            cd dsmovie-spring-react
          ENDSSH

      - name: Deploy da aplicação
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
<<<<<<< HEAD
          ssh -i ~/.ssh/id_ed25519 $VPS_USERNAME@$VPS_HOST "cat > ~/dsmovie-spring-react/.env << 'EOF'
          POSTGRES_DB=tsmovie
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=1234
          SPRING_PROFILES_ACTIVE=prod
          REACT_APP_BACKEND_URL=http://$VPS_HOST:8080
          EOF"

          ssh -i ~/.ssh/id_ed25519 $VPS_USERNAME@$VPS_HOST << 'ENDSSH'
=======
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          ENDSSH

      - name: Instalando aplicação no servidor com docker compose (deploy)
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
>>>>>>> 3324d88e1770435ef9dd951a1b57db5edd7bbfc6
            cd ~/dsmovie-spring-react
            docker-compose -f docker-compose.prod.yml down
            docker system prune -f
            docker-compose -f docker-compose.prod.yml up -d --build
            echo "Aguardando containers iniciarem..."
            sleep 30
          ENDSSH

      - name: Concluído com sucesso
        run: |
          echo "Deploy concluído com sucesso!"
