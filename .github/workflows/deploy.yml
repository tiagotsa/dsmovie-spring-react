name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tsmovie-frontend:latest

      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/src/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tsmovie-backend:latest

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            cd ~/dsmovie-spring-react
            
            # Create docker-compose.prod.yml with updated image names
            cat > docker-compose.prod.yml << 'EOF'
            version: '3'
            
            services:
              db:
                image: postgres:13-alpine
                environment:
                  POSTGRES_DB: tsmovie
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: 1234
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - tsmovie-network
            
              backend:
                image: ${DOCKER_USERNAME}/tsmovie-backend:latest
                environment:
                  SPRING_PROFILES_ACTIVE: prod
                  SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/tsmovie
                  SPRING_DATASOURCE_USERNAME: postgres
                  SPRING_DATASOURCE_PASSWORD: 1234
                ports:
                  - "8080:8080"
                depends_on:
                  - db
                networks:
                  - tsmovie-network
            
              frontend:
                image: ${DOCKER_USERNAME}/tsmovie-frontend:latest
                ports:
                  - "3000:80"
                depends_on:
                  - backend
                networks:
                  - tsmovie-network
            
            networks:
              tsmovie-network:
                driver: bridge
            
            volumes:
              postgres_data:
            EOF
            
            # Pull latest images and deploy
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml down
            docker system prune -af
            docker-compose -f docker-compose.prod.yml up -d
          ENDSSH