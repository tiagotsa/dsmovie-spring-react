name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build Backend with Maven
        run: |
          cd backend
          chmod +x mvnw
          ./mvnw clean package -DskipTests
      
      - name: Build Backend Docker Image
        run: |
          cd backend
          cp src/Dockerfile .
          DOCKER_BUILDKIT=1 docker build --progress=plain -t tsmovie-backend .
      
      - name: Build Frontend Docker Image
        run: |
          cd frontend
          DOCKER_BUILDKIT=1 docker build --progress=plain -t tsmovie-frontend .
      
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Iniciando deploy na VPS..."
            
            # Garantir que o diretório existe
            mkdir -p /opt/tsmovie
            cd /opt/tsmovie
            
            # Configurar Git se necessário
            if [ ! -d .git ]; then
              echo "Configurando repositório Git..."
              git init
              git remote add origin https://github.com/tiagotsa/dsmovie-spring-react.git
            fi
            
            # Pull latest code
            echo "Baixando código mais recente..."
            git pull origin main
            
            # Stop and remove existing containers
            echo "Parando containers existentes..."
            docker-compose -f docker-compose.prod.yml down
            
            # Remove old containers and volumes if needed
            echo "Removendo containers antigos..."
            docker-compose -f docker-compose.prod.yml rm -f
            
            # Build and start new containers
            echo "Iniciando novos containers..."
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Clean up unused images
            echo "Limpando imagens não utilizadas..."
            docker image prune -f
            
            echo "Deploy concluído!"