name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: üîë Configurando chave SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts

      - name: ‚úÖ Testando conex√£o SSH
        env:
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $VPS_USERNAME@$VPS_HOST "echo 'Conex√£o SSH bem-sucedida!'"

      - name: üõ† Instalando e configurando Git no VPS
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            if ! command -v git &> /dev/null; then
              echo "Instalando Git..."
              sudo apt-get update && sudo apt-get install -y git
            fi
            git config --global init.defaultBranch main
          ENDSSH

      - name: üöÄ Clone da aplica√ß√£o no VPS
        env:
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $VPS_USERNAME@$VPS_HOST << 'ENDSSH'
            cd ~
            if [ -d "dsmovie-spring-react" ]; then
              mv dsmovie-spring-react dsmovie-spring-react_backup_$(date +%Y%m%d_%H%M%S)
            fi
            git clone https://github.com/tiagotsa/dsmovie-spring-react.git
            cd dsmovie-spring-react
          ENDSSH

      - name: üîß Configurando ambiente no VPS
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            echo "POSTGRES_DB=tsmovie" > ~/dsmovie-spring-react/.env
            echo "POSTGRES_USER=postgres" >> ~/dsmovie-spring-react/.env
            echo "POSTGRES_PASSWORD=1234" >> ~/dsmovie-spring-react/.env
            echo "SPRING_PROFILES_ACTIVE=prod" >> ~/dsmovie-spring-react/.env
            echo "REACT_APP_BACKEND_URL=http://${{ secrets.VPS_HOST }}:8080" >> ~/dsmovie-spring-react/.env
          ENDSSH

      - name: üê≥ Instalando Docker e Docker Compose no VPS
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            if ! command -v docker &> /dev/null; then
              echo "Instalando Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "Instalando Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          ENDSSH

      - name: üöÄ Deploy da aplica√ß√£o com Docker Compose
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            cd ~/dsmovie-spring-react
            docker-compose -f docker-compose.prod.yml down
            docker system prune -f
            docker-compose -f docker-compose.prod.yml up -d --build
            echo "Aguardando containers iniciarem..."
            sleep 30
          ENDSSH

      - name: ‚úÖ Conclu√≠do com sucesso!
        run: |
          echo "üöÄ Deploy conclu√≠do com sucesso! üéâ"
