name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Setup Git on VPS
        run: |
          ssh -i ~/.ssh/private.key ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'ENDSSH'
            # Instalar Git se não estiver instalado
            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo apt-get update
              sudo apt-get install -y git
            fi

            # Configurar Git
            git config --global init.defaultBranch main
          ENDSSH

      - name: Clone Repository on VPS
        run: |
          ssh -i ~/.ssh/private.key ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'ENDSSH'
            # Remover diretório existente se houver
            rm -rf ~/tsmovie
            
            # Clonar repositório
            git clone https://github.com/tiagotsa/dsmovie-spring-react.git ~/tsmovie
            cd ~/tsmovie
          ENDSSH

      - name: Setup Docker and Nginx on VPS
        run: |
          ssh -i ~/.ssh/private.key ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'ENDSSH'
            # Instalar Docker se não estiver instalado
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
            fi

            # Instalar Docker Compose se não estiver instalado
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Instalar e configurar Nginx
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo apt-get update
              sudo apt-get install -y nginx
            fi

            # Configurar Nginx como proxy reverso
            sudo tee /etc/nginx/sites-available/tsmovie << EOF
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }

                location /api {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF

            # Ativar o site e remover o default
            sudo ln -sf /etc/nginx/sites-available/tsmovie /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default

            # Testar e reiniciar Nginx
            sudo nginx -t
            sudo systemctl restart nginx
          ENDSSH

      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/private.key ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} << 'ENDSSH'
            cd ~/tsmovie

            # Criar arquivo .env com as variáveis de ambiente
            cat > .env << EOF
            POSTGRES_DB=tsmovie
            POSTGRES_USER=${{ env.DB_USERNAME }}
            POSTGRES_PASSWORD=${{ env.DB_PASSWORD }}
            REACT_APP_API_URL=http://${{ env.VPS_HOST }}:8080
            EOF

            # Parar e remover containers existentes
            docker-compose -f docker-compose.prod.yml down

            # Reconstruir e iniciar containers
            docker-compose -f docker-compose.prod.yml up -d --build

            # Aguardar containers iniciarem
            echo "Waiting for containers to start..."
            sleep 30

            # Verificar status dos containers
            docker-compose -f docker-compose.prod.yml ps

            # Mostrar logs dos containers
            docker-compose -f docker-compose.prod.yml logs --tail=50
          ENDSSH