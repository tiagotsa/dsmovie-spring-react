name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # --- Backend ---
      - name: Build Backend Docker Image
        run: |
          cd backend
          cp src/Dockerfile .
          docker build -t tsmovie-backend .
      
      # --- Frontend ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      
      - name: Build Frontend
        env:
          CI: false  # Prevents treating warnings as errors
          REACT_APP_BACKEND_URL: http://145.223.29.209:8080
        run: |
          cd frontend
          yarn install --frozen-lockfile
          yarn build
          docker build -t tsmovie-frontend .
      
      # --- Deploy to VPS ---
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Garantir que o diretório existe
            mkdir -p /opt/tsmovie
            cd /opt/tsmovie
            
            # Configurar Git se necessário
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/tiagotsa/dsmovie-spring-react.git
            fi
            
            # Pull latest code
            git pull origin main
            
            # Stop and remove existing containers
            docker-compose -f docker-compose.prod.yml down
            
            # Remove old containers and volumes if needed
            docker-compose -f docker-compose.prod.yml rm -f
            
            # Build and start new containers
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Clean up unused images
            docker image prune -f