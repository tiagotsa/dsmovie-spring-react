name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Backend
        working-directory: backend
        env:
          SPRING_PROFILES_ACTIVE: prod
          MAVEN_OPTS: "-Xmx2048m"
        run: |
          chmod +x mvnw
          ./mvnw clean package -B -DskipTests

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Backend
        run: |
          scp -i ~/.ssh/private.key backend/target/*.jar ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USERNAME }}/app/backend/
          ssh -i ~/.ssh/private.key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "sudo systemctl restart tsmovie"

      - name: Build Frontend
        working-directory: frontend
        env:
          CI: false
          DISABLE_ESLINT_PLUGIN: true
          GENERATE_SOURCEMAP: false
        run: |
          yarn config set network-timeout 300000
          yarn install
          yarn build

      - name: Deploy Frontend
        run: |
          scp -i ~/.ssh/private.key -r frontend/build/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USERNAME }}/app/frontend/

      - name: Setup Database
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          ssh -i ~/.ssh/private.key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            # Check if PostgreSQL is installed
            if ! command -v psql &> /dev/null; then
              echo "Installing PostgreSQL..."
              sudo apt-get update
              sudo apt-get install -y postgresql postgresql-contrib
            fi

            # Start PostgreSQL if not running
            if ! systemctl is-active --quiet postgresql; then
              echo "Starting PostgreSQL..."
              sudo systemctl start postgresql
            fi

            # Create database and user if they don't exist
            sudo -u postgres psql << EOF
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'tsmovie') THEN
                CREATE DATABASE tsmovie;
              END IF;
              
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$DB_USERNAME') THEN
                CREATE USER $DB_USERNAME WITH PASSWORD '$DB_PASSWORD';
              END IF;
              
              GRANT ALL PRIVILEGES ON DATABASE tsmovie TO $DB_USERNAME;
            END
            \$\$;
            EOF

            # Configure pg_hba.conf to allow password authentication
            sudo sed -i 's/local   all             all                                     peer/local   all             all                                     md5/g' /etc/postgresql/*/main/pg_hba.conf
            sudo systemctl restart postgresql
          ENDSSH

      - name: Restart Application
        run: |
          ssh -i ~/.ssh/private.key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "sudo systemctl restart tsmovie nginx"